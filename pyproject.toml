[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"


[project]
name = "RGO-lib-parser"
version = "1.4.0" # Не забудь обновлять версию при релизах
description = "Simple thing for a simple task - a parser!"
readme = "README.md"
requires-python = ">=3.9"
license = { file = "LICENSE" }
authors = [
    { name = "diam0voi", email = "diam0voi@users.noreply.github.com" },
]


classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: MacOS",
    "Operating System :: POSIX :: Linux",
    "Topic :: Utilities",
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Environment :: Win32 (MS Windows)",
    "Environment :: MacOS X",
    "Environment :: X11 Applications",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: GNU Affero General Public License v3.0 only"
]


dependencies = [
    "Pillow>=11.0.0,<12.0.0",
    "Requests>=2.32.0,<3.0.0",
]


[project.urls]
Homepage = "https://github.com/diam0voi/RGO-lib-parser"
Issues = "https://github.com/diam0voi/RGO-lib-parser/issues"

# Зависимости для разработки. Устанавливаются через `uv run setup` (который выполнит uv pip install -e .[dev])
[project.optional-dependencies]
dev = [
    "pytest>=8.0.0,<9.0.0",
    "coverage[toml]>=4.1.0,<7.0.0",
    "pytest-cov>=4.1,<6.0.0",
    "coveralls>=3.0.0,<4.0.0", # Для Coveralls.io, если используешь
    "ruff>=0.4.0",
    "pre-commit>=3.0.0,<4.0.0", # Если используешь pre-commit хуки
    "build",
    "twine",
    "mypy>=1.0,<2.0",
    "types-requests",
    "types-Pillow",
    "tox>=4.0",
    "lxml",
]

# --- Для запуска через `uv run <script_name>` ---
[tool.uv.scripts]
# Основная команда настройки (требует глобальный uv)
setup = """
sh -c '
echo ">>> [1/2] Ensuring virtual environment .venv exists..."
uv venv .venv --seed || { echo "Error: Failed to create/ensure .venv" ; exit 1; }
echo ".venv environment ensured."

echo ">>> [2/2] Installing project dependencies into .venv..."
# Используем uv для установки в .venv. Он должен сам найти python в .venv.
uv pip install -e .[dev] || { echo "Error: Failed to install dependencies." ; exit 1; }
echo "Dependencies installed."

echo ""
echo ">>> Setup complete!"
echo ">>> Activate the virtual environment:"
echo "    Linux/macOS: source .venv/bin/activate"
echo "    Windows CMD: .venv\\\\Scripts\\\\activate.bat"
echo "    Windows PowerShell: .venv\\\\Scripts\\\\Activate.ps1"
echo ">>> Available commands (run with 'uv run <command>' or directly from activated venv):"
uv run --list
'
"""

# Запуск приложения
app = "python -m src.main"
# Запуск тестов
test = "pytest"
# Запуск линтера и проверки формата
lint = "ruff check src tests"
# Запуск проверки типов (через tox)
typecheck = "tox -e typing"
# Запуск всех проверок tox (как в CI)
check-all = "tox"
# Показать список команд
help = "uv run --list"


# --- Настройки инструментов ---
[tool.ruff]
line-length = 88
src = ["src"]
target-version = "py39"


[tool.ruff.lint]
select = [
    "E", "W", "F", "I", "UP", "B", "C4", "SIM",
]
ignore = []


[tool.ruff.format]


[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
addopts = "-rA --strict-markers --cov=src --cov-report=term-missing --cov-report=html"


[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "src/gui.py", # Пока думаю, как тестировать
]


[tool.coverage.report]
fail_under = 50 # Порог покрытия тестами
show_missing = true
skip_covered = true


[tool.coverage.html]
directory = "reports/coverage_rep"


[tool.mypy]
python_version = "3.9"
files = ["src"]

ignore_missing_imports = true
disallow_untyped_defs = false
check_untyped_defs = false

# Позже можно ужесточить:
# warn_return_any = true
# warn_unused_ignores = true
# strict = true
