[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"


[project]
name = "RGO-lib-parser"
version = "1.4.0"
description = "Simple thing for a simple task - a parser!"
readme = "README.md"
requires-python = ">=3.9"
license = { file = "LICENSE" }
authors = [
    { name = "diam0voi", email = "diam0voi@users.noreply.github.com" },
]


classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: MacOS",
    "Operating System :: POSIX :: Linux",
    "Topic :: Utilities",
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Environment :: Win32 (MS Windows)",
    "Environment :: MacOS X",
    "Environment :: X11 Applications",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: GNU Affero General Public License v3.0 only"
]

dependencies = [
    "Pillow>=11.0.0,<12.0.0",
    "Requests>=2.32.0,<3.0.0",
]

[project.urls]
Homepage = "https://github.com/diam0voi/RGO-lib-parser"
Issues = "https://github.com/diam0voi/RGO-lib-parser/issues"

# `pip install .[dev]` или `uv pip install .[dev]`
[project.optional-dependencies]
dev = [
    "pytest>=8.0.0,<9.0.0",
    "coverage[toml]>=4.1.0,<7.0.0",
    "pytest-cov>=4.1,<6.0.0",
    "coveralls>=3.0.0,<4.0.0",
    "ruff>=0.4.0",
    "pre-commit>=3.0.0,<4.0.0",
    "uv>=0.1.18",
    "build",
    "twine",
]


[tool.ruff]
line-length = 88
src = ["src"]
target-version = "py39"


[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # Pyflakes
    "I",  # isort
    "UP", # pyupgrade
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "SIM",# flake8-simplify
]
ignore = []
# exclude = []


[tool.ruff.format]


[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
addopts = "-rA --cov=src --cov-report=term-missing --cov-report=html"  
# Позже -q и для неописанных маркеров --strict-markers


[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "src/gui.py",      # Пока думаю, как тестировать
]


[tool.coverage.report]
fail_under = 50
show_missing = true
skip_covered = true


[tool.coverage.html]
directory = "report"
