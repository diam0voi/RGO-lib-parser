[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"


[project]
name = "RGO-lib-parser"
version = "1.4.0" # Не забудь обновлять версию при релизах
description = "Simple thing for a simple task - a parser!"
readme = "README.md"
requires-python = ">=3.9"
license = { file = "LICENSE" }
authors = [
    { name = "diam0voi", email = "diam0voi@users.noreply.github.com" },
]


classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: MacOS",
    "Operating System :: POSIX :: Linux",
    "Topic :: Utilities",
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Environment :: Win32 (MS Windows)",
    "Environment :: MacOS X",
    "Environment :: X11 Applications",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: GNU Affero General Public License v3.0 only"
]


dependencies = [
    "Pillow>=11.0.0,<12.0.0",
    "Requests>=2.32.0,<3.0.0",
]


[project.urls]
Homepage = "https://github.com/diam0voi/RGO-lib-parser"
Issues = "https://github.com/diam0voi/RGO-lib-parser/issues"


# Устанавливаются через `uv run setup`
[project.optional-dependencies]
dev = [
    "pytest>=8.0.0,<9.0.0",
    "pytest-mock>=3.10.0,<4.0.0",
    "pytest-cov>=4.1.0,<6.0.0",
    "coverage[toml]>=4.1.0,<8.0.0",
    "coveralls>=3.0.0,<4.0.0",
    "ruff>=0.4.0",
    "pre-commit>=3.0.0,<4.0.0",
    "mypy>=1.0,<2.0",
    "types-requests",
    "types-Pillow",
    "lxml",
]


# --- Настройки инструментов ---
[tool.ruff]
src = ["src"]
line-length = 88
target-version = "py39"
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors (базовые ошибки стиля)
    "W",   # pycodestyle warnings (предупреждения стиля)
    "F",   # Pyflakes (логические ошибки, неиспользуемые переменные/импорты)
    "I",   # isort (сортировка импортов)
    "UP",  # pyupgrade (модернизация синтаксиса Python до target-version)
    "B",   # flake8-bugbear (потенциальные баги и сомнительные практики)
    "C4",  # flake8-comprehensions (стиль списковых включений и генераторов)
    "SIM", # flake8-simplify (упрощение кода, например, `if cond: return True else: return False` -> `return cond`)
    "A",   # flake8-builtins (предупреждает о переопределении встроенных имен)
    "ISC", # flake8-implicit-str-concat (находит неявную конкатенацию строк в одной строке)
    "N",   # pep8-naming (проверка имен переменных, функций, классов на соответствие PEP 8)
    "D",   # pydocstyle (проверка наличия и стиля докстрингов - ОЧЕНЬ полезно, но может быть ОЧЕНЬ шумно вначале, если докстрингов нет)
    "TRY", # flake8-tryceratops (лучшие практики обработки исключений)
    "RUF", # Ruff-specific rules (специфичные правила Ruff, часто очень полезные)
]

ignore = [
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function
    "D104", # Missing docstring in public package
    "D105", # Missing docstring in magic method
    "D106", # Missing docstring in public nested class
    "D107", # Missing docstring in __init__
    "T201", # 'print' found
    "RUF001",
    "RUF002",
    "RUF003",
    "E501",
    "F841",
    "TRY003",
    "N806",
    "D205",
    "TRY300",
    "TRY400",
    "UP006",
    "UP035",
    "SIM103",
    "A005",
    "F821",
]

fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.isort]
known-first-party = ["src"]
force-sort-within-sections = true

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"


[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
addopts = "-rA --strict-markers --cov=src --cov-report=term-missing --cov-report=html"


[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "src/gui.py",
    "src/ui_builder.py",  # Пока не решил как тестировать
    "src/__init__.py",
    "src/types.py",  # Нечего покрывать
]

[tool.coverage.report]
fail_under = 50
show_missing = true
skip_covered = true

[tool.coverage.html]
directory = "reports/coverage_rep"


[tool.mypy]
python_version = "3.9"
files = ["src"]
ignore_missing_imports = true
check_untyped_defs = true
disallow_untyped_defs = false

# Позже
# warn_return_any = true
# warn_unused_ignores = true
# strict = true
