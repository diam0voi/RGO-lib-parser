# tox.ini

[tox]
envlist =
    py{39,310,311,312,313} # Сокращенная запись для версий Python
    lint
    typing
minversion = 4.0
isolated_build = True

[gh-actions]
python =
    3.9: py39
    3.10: py310
    3.11: py311
    3.12: py312
    3.13: py313, lint, typing # lint и typing будут запускаться только на 3.13 в CI

[testenv]
allowlist_externals =
    uv
    python
install_command = uv pip install {opts} {packages}
# Убедись, что pytest-cov есть в [project.optional-dependencies] dev в pyproject.toml
deps = .[dev]
package = wheel
commands =
    ; Запускаем pytest, собираем покрытие для папки src
    ; Генерируем отчеты:
    ;   term-missing: Показывает пропущенные строки в консоли
    ;   xml: coverage.xml для Codecov
    ;   lcov: coverage.lcov для Coveralls (часто предпочитаемый формат)
    pytest --cov=src --cov-report=term-missing --cov-report=xml:coverage.xml --cov-report=lcov:coverage.lcov {posargs} tests/

[testenv:lint]
package = skip
deps = .[dev]
commands =
    ruff format --check src tests
    ruff check src tests

[testenv:typing]
package = skip
deps = .[dev]
commands =
    python -c "import os; os.makedirs('reports/mypy_rep/mypy_html', exist_ok=True); os.makedirs('reports/mypy_rep/mypy_txt', exist_ok=True)"
    ; Запускаем mypy, игнорируем ошибки выхода (-), чтобы CI не падал только из-за mypy (если это желаемое поведение)
    -mypy src --html-report reports/mypy_rep/mypy_html --linecount-report reports/mypy_rep/mypy_txt {posargs}
    python -c "import sys, pathlib; report_path = pathlib.Path('reports/mypy_rep/mypy_txt/linecount.txt'); print(f'\n--- Mypy Linecount Report ---'); print(report_path.read_text().strip() if report_path.exists() else 'Report file not found.')"