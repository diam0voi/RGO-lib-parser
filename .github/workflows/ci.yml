name: Python CI, Linting & Coverage

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-and-lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
      fail-fast: false

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    - name: Install dependencies using uv
      run: |
        uv pip install --system -e ".[dev]"

    - name: Lint with Ruff
      run: |
        ruff check src tests --force-exclude

    - name: Run tests and collect coverage data (parallel mode)
      run: |
        coverage run --parallel-mode --source=src -m pytest tests/

    - name: Find and Rename coverage file per Python version
      run: |
        # coverage run --parallel создает файлы вида .coverage.<hostname>.<pid>.<random>
        # Найдем этот файл (должен быть только один в корне)
        COVERAGE_FILE=$(ls .coverage.*)
        if [ -z "$COVERAGE_FILE" ]; then
          echo "Error: No .coverage.* file found after running tests!"
          exit 1
        fi
        # Переименовываем в предсказуемое имя
        NEW_NAME=".coverage.${{ matrix.python-version }}"
        mv "$COVERAGE_FILE" "$NEW_NAME"
        echo "Renamed $COVERAGE_FILE to $NEW_NAME"

    - name: Upload coverage data artifact
      uses: actions/upload-artifact@v4
      with:
        name: coverage-data-${{ matrix.python-version }}
        path: .coverage.${{ matrix.python-version }} # Загружаем переименованный файл
        retention-days: 1

  upload-coverage:
    needs: test-and-lint
    runs-on: ubuntu-latest
    if: success() # Или always() если нужно загружать отчет даже при падении тестов

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    - name: Install coverage dependencies using uv
      run: |
        uv pip install --system -e ".[dev]" # Убедимся, что coverage установлен

    - name: Download all coverage data artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: coverage-data-*
        path: . # Скачиваем в корень рабочего каталога

    - name: List downloaded files (Detailed Debug)
      run: |
        echo "--- Listing current directory (ls -la .) ---"
        ls -la .
        echo "--- Listing directories matching pattern (find . -maxdepth 1 -type d -name 'coverage-data-*') ---"
        find . -maxdepth 1 -type d -name 'coverage-data-*' -ls || echo "No directories matching 'coverage-data-*' found."
        echo "--- Recursively searching for ALL .coverage* files (find . -name '.coverage*') ---"
        find . -name '.coverage*' -ls || echo "No files matching '.coverage*' found recursively."
        echo "--- End of file listing ---"

    - name: Combine coverage data (Attempt 1: Default search)
      id: combine_default
      continue-on-error: true # Продолжаем, даже если этот шаг упадет
      run: |
        echo "Attempting 'coverage combine' (searches current dir by default)..."
        coverage combine --keep # --keep чтобы не удалять исходные файлы при ошибке
        echo "Default combine finished with exit code $?"

    - name: Combine coverage data (Attempt 2: Explicit find)
      # Запускаем, только если предыдущая попытка не удалась (exit code != 0)
      if: steps.combine_default.outcome == 'failure'
      run: |
        echo "Default combine failed. Attempting 'coverage combine' with explicit file list from find..."
        # Находим все файлы .coverage* рекурсивно и передаем их как аргументы
        # Используем find ... -exec для обработки пробелов/спецсимволов, если они вдруг будут
        find . -name '.coverage.*' -exec coverage combine --keep --append {} +
        # Проверяем результат combine
        if [ ! -f .coverage ]; then
           echo "Combine failed: .coverage file not created."
           exit 1
        fi
        echo "Combine with explicit files successful."
        ls -la .coverage

    - name: Generate and check coverage report
      run: |
        echo "Generating coverage report..."
        # Убедимся, что файл .coverage существует перед генерацией отчета
        if [ ! -f .coverage ]; then
           echo "Error: Cannot generate report, combined .coverage file not found!"
           # Выводим содержимое директории для диагностики
           echo "--- Current directory contents ---"
           ls -la .
           echo "--- Recursive file list ---"
           find . -type f -ls
           exit 1
        fi
        coverage report --fail-under=99
        coverage xml -o coverage.xml

    - name: Upload coverage report to Coveralls
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
        COVERALLS_SERVICE_NAME: github
      run: |
        coveralls --service=github

    - name: Upload results to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage.xml
        fail_ci_if_error: true
        verbose: true
