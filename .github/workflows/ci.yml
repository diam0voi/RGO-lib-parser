name: Python CI & Linting

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-and-lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
      fail-fast: false

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH 

    - name: Install dependencies using uv
      run: |
        uv pip install -e ".[dev]"

    - name: Lint with Ruff
      run: |
        echo "Running Ruff..."
        ruff check src tests --force-exclude
        ruff format --check src tests

    - name: Run tests with coverage
      run: |
        pytest --cov=src --cov-report=xml --cov-report=term-missing --cov-fail-under=50 tests/

  upload-coverage:
    needs: test-and-lint
    runs-on: ubuntu-latest
    if: success()
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    - name: Install coverage dependencies using uv
      run: |
        uv pip install -e ".[dev]"
        uv pip install coveralls

    # После проверки убрать повторный запуск тестов так:
    # 1. В job 'test-and-lint' ++ шаг для загрузки артефакта 'coverage.xml':
    #    - name: Upload coverage artifact
    #      uses: actions/upload-artifact@v4
    #      with:
    #        name: coverage-xml
    #        path: coverage.xml
    # 2. В job 'upload-coverage' -- шаг "Run tests with coverage"
    # 3. ++ шаг для скачивания артефакта:
    #    - name: Download coverage artifact
    #      uses: actions/download-artifact@v4
    #      with:
    #        name: coverage-xml
    # 4. Только 'coveralls' и 'codecov' в шаге установки зависимостей.

    - name: Run tests and generate coverage report
      run: |
        pytest --cov=src --cov-report=xml tests/

    - name: Upload coverage report to Coveralls
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
        COVERALLS_PARALLEL: true
        COVERALLS_SERVICE_NAME: github
      run: |
        coveralls

    - name: Finalize Coveralls build (only needed for parallel runs)
      if: always() && env.COVERALLS_PARALLEL == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
      run: |
        coveralls --finish

    - name: Upload results to Codecov
      uses: codecov/codecov-action@v4 # Обновлено до v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage.xml
        # fail_ci_if_error: true  после проверки надо завершать CI с ошибкой, если загрузка в Codecov не удалась