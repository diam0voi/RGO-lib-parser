name: Python CI & Linting

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-and-lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
      fail-fast: false

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Lint with Ruff and Flake8
      run: |
        echo "Running Ruff..."
        ruff check src tests --force-exclude
        echo "Running Flake8..."
        flake8 src tests --count --show-source --statistics

    - name: Format check with Black
      run: |
        black --check src tests

    - name: Run tests with coverage
      run: |
        coverage run --source=src -m pytest tests/
        coverage report -m --fail-under=50

  upload-coverage:
    needs: test-and-lint
    runs-on: ubuntu-latest
    if: success()
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
        cache: 'pip'

    - name: Install Coveralls and Codecov dependencies
      run: |
        python -m pip install --upgrade pip
        pip install coverage coveralls
        pip install pytest pytest-cov

    - name: Run tests with coverage
      run: |
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        coverage run --source=src -m pytest tests/
        pytest --cov --cov-branch --cov-report=xml

    - name: Upload coverage reports to Coveralls
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
      run: |
        coveralls --service=github

    - name: Upload results to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
