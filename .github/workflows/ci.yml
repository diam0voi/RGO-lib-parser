name: Python CI, Linting & Coverage

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-and-lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Запускаем тесты на всех поддерживаемых версиях
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
      fail-fast: false # Не отменять другие jobs, если один упал

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    - name: Install dependencies using uv
      run: |
        # Устанавливаем все зависимости, включая dev (тесты, coverage, ruff и т.д.)
        uv pip install --system -e ".[dev]"

    - name: Lint with Ruff
      run: |
        echo "Running Ruff..."
        ruff check src tests --force-exclude

    - name: Run tests and collect coverage data (parallel mode)
      run: |
        # Запускаем pytest через coverage в параллельном режиме
        # --source=src указывает, где искать исходный код для отчета
        # -m pytest передает управление pytest
        coverage run --parallel-mode --source=src -m pytest tests/

    - name: Rename coverage file per Python version
      run: |
        # Переименовываем файл данных, чтобы они не перезаписались при объединении
        # Хотя с download-artifact v4 это не строго обязательно, т.к. они в разных папках окажутся,
        # но это хорошая практика для ясности. coverage combine все равно найдет их.
        # coverage run --parallel создает файлы вида .coverage.<hostname>.<pid>.<random>
        # Найдем этот файл и переименуем
        COVERAGE_FILE=$(ls .coverage.*)
        mv "$COVERAGE_FILE" ".coverage.${{ matrix.python-version }}"
        echo "Renamed $COVERAGE_FILE to .coverage.${{ matrix.python-version }}"


    - name: Upload coverage data artifact
      uses: actions/upload-artifact@v4
      with:
        # Имя артефакта, содержащего файл .coverage.<version>
        name: coverage-data-${{ matrix.python-version }} # Уникальное имя для каждого job'а
        path: .coverage.${{ matrix.python-version }} # Загружаем только переименованный файл
        retention-days: 1 # Храним артефакт недолго

  upload-coverage:
    # Этот job зависит от успешного завершения ВСЕХ jobs в матрице test-and-lint
    needs: test-and-lint
    runs-on: ubuntu-latest
    # Запускаем только если предыдущие шаги (тесты и линтинг) прошли успешно
    if: success() # Можно заменить на always(), если нужно загружать отчет даже при падении тестов, но это редкость

    steps:
    - name: Check out code
      # Код нужен для coverage, чтобы найти исходники при генерации отчета
      uses: actions/checkout@v4

    - name: Set up Python
      # Используем одну версию Python для обработки отчетов (например, последнюю стабильную)
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    - name: Install coverage dependencies using uv
      run: |
        # Устанавливаем зависимости, нужные для combine и загрузки отчетов
        # Убедись, что coverage установлен
        uv pip install --system -e ".[dev]"

    
    - name: Download all coverage data artifacts
      uses: actions/download-artifact@v4
      with:
        # Скачиваем все артефакты, начинающиеся с 'coverage-data-'
        pattern: coverage-data-*
        # Скачиваем в ОТДЕЛЬНУЮ папку, чтобы избежать конфликтов
        path: coverage-artifacts
        # download-artifact v4 создаст подпапки ВНУТРИ coverage-artifacts:
        # coverage-artifacts/coverage-data-3.9/
        # coverage-artifacts/coverage-data-3.10/
        # ...

    - name: List downloaded files # Теперь ищем внутри coverage-artifacts
      run: |
        echo "Listing files after download inside coverage-artifacts/:"
        ls -R coverage-artifacts # Показываем всю структуру скачанного

    - name: Combine coverage data
      run: |
        echo "Combining coverage data from downloaded artifacts..."
        # Указываем coverage combine искать данные ВНУТРИ coverage-artifacts/coverage-data-*/
        # coverage combine достаточно умен, чтобы найти .coverage.* файлы там
        # Первый аргумент указывает директории, где искать данные
        coverage combine coverage-artifacts/coverage-data-*/*

        # Альтернативный, более явный путь к файлам данных:
        # coverage combine coverage-artifacts/coverage-data-*/.coverage.*

        echo "Coverage data combined into .coverage file (in the root)."
        # Файл .coverage по умолчанию создается в текущей директории (корень воркспейса)
        ls -la .coverage
        if [ ! -s .coverage ]; then
          echo "Error: Combined .coverage file is empty or does not exist!"
          echo "Files found by combine's debug command:"
          coverage debug data # Эта команда покажет, какие файлы данных он нашел
          exit 1
        fi
    
            
    - name: Generate and check coverage report
      run: |
        # Генерируем отчет в терминал и проверяем минимальный порог покрытия
        # Установи свой желаемый порог вместо 99
        coverage report --fail-under=99
        # Генерируем XML отчет для Codecov и Coveralls
        coverage xml -o coverage.xml

    - name: Upload coverage report to Coveralls
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
        COVERALLS_SERVICE_NAME: github # Явно указываем сервис
        # PARALLEL: false (по умолчанию) и не нужен --finish, т.к. загружаем один объединенный отчет
      run: |
        # Устанавливаем coveralls если его нет в [dev] зависимостях явно
        # uv pip install coveralls
        coveralls --service=github # Передаем сервис явно для надежности

    - name: Upload results to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage.xml # Указываем путь к объединенному отчету
        fail_ci_if_error: true # Рекомендуется включить после отладки
        verbose: true # Включить для отладки, если будут проблемы с загрузкой
