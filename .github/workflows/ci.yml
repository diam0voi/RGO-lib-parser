name: Python CI, Linting & Coverage

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-and-lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Запускаем тесты на всех поддерживаемых версиях
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
      fail-fast: false # Не отменять другие jobs, если один упал

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    - name: Install dependencies using uv
      run: |
        # Устанавливаем все зависимости, включая dev (тесты, coverage, ruff и т.д.)
        uv pip install --system -e ".[dev]"

    - name: Lint with Ruff
      run: |
        echo "Running Ruff..."
        ruff check src tests --force-exclude

    - name: Run tests and collect coverage data (parallel mode)
      run: |
        # Запускаем pytest через coverage в параллельном режиме
        # --source=src указывает, где искать исходный код для отчета
        # -m pytest передает управление pytest
        coverage run --parallel-mode --source=src -m pytest tests/

    - name: Rename coverage file per Python version
      id: rename_coverage # Добавим ID для ясности
      run: |
        echo "Looking for coverage data file (.coverage.*)..."
        # Используем find для надежного поиска ОДНОГО файла .coverage.* в текущей директории
        # -maxdepth 1: не искать в подпапках
        # -name '.coverage.*': паттерн имени
        # -not -name '.coverage': исключить сам файл .coverage (если он вдруг есть)
        # -print -quit: найти первый и выйти (более эффективно)
        COVERAGE_FILE=$(find . -maxdepth 1 -type f -name '.coverage.*' -not -name '.coverage' -print -quit)

        # Проверяем, найден ли файл
        if [ -z "$COVERAGE_FILE" ]; then
          echo "::error::No .coverage.* data file found after running tests!"
          echo "Listing current directory contents:"
          ls -la .* # Показываем все файлы, включая скрытые
          exit 1
        fi

        # На всякий случай проверим, нет ли других .coverage.* файлов
        OTHER_FILES=$(find . -maxdepth 1 -type f -name '.coverage.*' -not -name '.coverage' -not -path "$COVERAGE_FILE" -print)
        if [ -n "$OTHER_FILES" ]; then
           echo "::warning::Found more than one .coverage.* file. This is unexpected. Using the first one found: $COVERAGE_FILE"
           echo "Other files found:"
           echo "$OTHER_FILES"
        fi

        TARGET_FILE=".coverage.${{ matrix.python-version }}"
        echo "Found unique coverage file: $COVERAGE_FILE"
        echo "Attempting to rename '$COVERAGE_FILE' to '$TARGET_FILE'"
        # Используем кавычки на случай странных символов в имени файла (хотя маловероятно)
        mv "$COVERAGE_FILE" "$TARGET_FILE"

        # Проверяем, что переименование удалось и файл существует
        if [ ! -f "$TARGET_FILE" ]; then
          echo "::error::Failed to rename or find the target file '$TARGET_FILE' after move!"
          echo "Listing current directory contents again:"
          ls -la .*
          exit 1
        fi
        echo "Successfully renamed coverage file to $TARGET_FILE"

    - name: Upload coverage data artifact
      uses: actions/upload-artifact@v4
      with:
        # Имя артефакта, содержащего файл .coverage.<version>
        name: coverage-data-${{ matrix.python-version }} # Уникальное имя для каждого job'а
        path: .coverage.${{ matrix.python-version }} # Загружаем только переименованный файл
        retention-days: 1 # Храним артефакт недолго

  upload-coverage:
    needs: test-and-lint
    runs-on: ubuntu-latest
    if: success()

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install coverage dependencies using uv
        run: |
          uv pip install --system -e ".[dev]"

      - name: List files BEFORE download attempt
        run: |
          echo "--- Listing current directory BEFORE download ---"
          ls -la
          echo "-------------------------------------------------"

      - name: Download all coverage data artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: coverage-data-*
          # Скачиваем В папку coverage-artifacts.
          # Похоже, файлы .coverage.X.Y окажутся ПРЯМО ЗДЕСЬ.
          path: coverage-artifacts

      - name: List files AFTER download attempt
        run: |
          echo "--- Listing current directory AFTER download ---"
          ls -la
          echo "--- Checking for coverage-artifacts directory ---"
          ls -ld coverage-artifacts || echo "!!! Directory coverage-artifacts NOT FOUND !!!"
          echo "--- Listing contents of coverage-artifacts ---"
          # Ожидаем увидеть .coverage.3.9, .coverage.3.10 и т.д. здесь
          ls -la coverage-artifacts || echo "!!! Cannot list coverage-artifacts contents !!!"
          echo "--------------------------------------------------------"

      - name: Combine coverage data
        run: |
          echo "Attempting to combine coverage data..."
          # Проверяем, что папка coverage-artifacts существует
          if [ ! -d "coverage-artifacts" ]; then
             echo "::error::Directory coverage-artifacts not found before combine!"
             exit 1
          fi
          # Проверяем, что она не пустая
          if [ -z "$(ls -A coverage-artifacts)" ]; then
             echo "::error::Directory coverage-artifacts exists but is EMPTY before combine!"
             exit 1
          fi

          echo "Directory coverage-artifacts found and contains files. Combining..."
          # ТЕПЕРЬ ГЛАВНОЕ ИЗМЕНЕНИЕ:
          # Указываем coverage combine искать файлы .coverage.*
          # НЕПОСРЕДСТВЕННО внутри папки coverage-artifacts
          # coverage combine coverage-artifacts # Можно так, coverage найдет файлы
          # Или более явно:
          coverage combine coverage-artifacts/.coverage.*

          echo "Combine command finished. Checking for .coverage file..."
          # Файл .coverage создается в текущей директории (корне)
          ls -la .coverage
          if [ ! -s .coverage ]; then
            echo "::error::Combined .coverage file is empty or does not exist after combine!"
            echo "--- Coverage Debug Data ---"
            coverage debug data
            echo "---------------------------"
            exit 1
          fi
          echo "Coverage data combined successfully."

      - name: Generate and check coverage report
        run: |
          coverage report --fail-under=99 # Установи свой порог
          coverage xml -o coverage.xml

      - name: Upload coverage report to Coveralls
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
          COVERALLS_SERVICE_NAME: github
        run: |
          # uv pip install coveralls # Если нужно
          coveralls --service=github

      - name: Upload results to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          fail_ci_if_error: true
          verbose: true
