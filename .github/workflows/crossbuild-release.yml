name: Build Cross-Platform Release

on:
  release:
    types: [published]

permissions:
  contents: write

jobs:
  build-release:
    strategy:
      matrix:
        include:
          - os: windows-latest
            python-version: '3.12'
            asset_name: RGO_lib_parser_win64.exe
            build_command: pyinstaller --onefile --windowed --icon="assets/winapp_lilacbook.ico" --add-data "assets/window_bnwbook.png;." --name RGO_lib_parser src/main.py 
            asset_path: ./dist/RGO_lib_parser.exe
            asset_content_type: application/vnd.microsoft.portable-executable
          - os: macos-latest
            python-version: '3.12'
            asset_name: RGO_lib_parser_macOS.zip
            build_command: pyinstaller --windowed --icon="assets/macapp_lilacbook.icns" --add-data "assets/window_bnwbook.png:." --name "RGO Lib Parser" src/main.py
            asset_path: ./dist/RGO_lib_parser_macOS.zip
            asset_content_type: application/zip
            post_build_command: zip -r ./dist/RGO_lib_parser_macOS.zip ./dist/"RGO Lib Parser.app"
          - os: ubuntu-latest
            python-version: '3.12'
            asset_name: RGO_lib_parser_ubuntu
            build_command: pyinstaller --onefile --noconsole --add-data "assets/window_bnwbook.png:." --name RGO_lib_parser src/main.py
            asset_path: ./dist/RGO_lib_parser
            asset_content_type: application/octet-stream
            pre_build_command: |
              sudo apt-get update
              sudo apt-get install -y python3-tk

    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
        shell: bash

      - name: Install Tkinter (Linux only)
        if: runner.os == 'Linux' && matrix.pre_build_command
        run: ${{ matrix.pre_build_command }}
        shell: bash

      - name: Install dependencies using uv
        run: |
          uv pip install --system .
          uv pip install --system pyinstaller
        shell: bash

      - name: Build with PyInstaller
        run: ${{ matrix.build_command }}
        shell: bash

      - name: Create Zip Archive (macOS only)
        if: runner.os == 'macOS' && matrix.post_build_command
        run: ${{ matrix.post_build_command }}
        shell: bash

      - name: Generate SHA512 Checksum (Windows)
        if: runner.os == 'Windows'
        id: checksum_win
        working-directory: ./dist
        run: |
          $assetName = "${{ matrix.asset_name }}"
          $localFileName = Split-Path -Path "${{ matrix.asset_path }}" -Leaf
          $checksumFile = "$assetName.sha512"
          $checksumValue = (Get-FileHash -Path $localFileName -Algorithm SHA512).Hash.ToLower()
          $checksumLine = "$checksumValue  $assetName"
          Set-Content -Path $checksumFile -Value $checksumLine
          echo "checksum_line=$checksumLine" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
        shell: pwsh

      - name: Generate SHA512 Checksum (Linux/macOS)
        if: runner.os != 'Windows'
        id: checksum_nix
        working-directory: ./dist
        run: |
          ASSET_NAME="${{ matrix.asset_name }}"
          LOCAL_FILENAME=$(basename "${{ matrix.asset_path }}")
          CHECKSUM_FILE="${ASSET_NAME}.sha512"
          CHECKSUM_LINE=$(shasum -a 512 "$LOCAL_FILENAME" | awk -v name="$ASSET_NAME" '{print $1 "  " name}')
          echo "$CHECKSUM_LINE" > "$CHECKSUM_FILE"
          echo "checksum_line=${CHECKSUM_LINE}" >> $GITHUB_OUTPUT
        shell: bash

      - name: Upload Release Asset (${{ matrix.asset_name }})
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ github.event.release.tag_name }} ${{ matrix.asset_path }}#${{ matrix.asset_name }} --clobber
        shell: bash

      - name: Create temporary checksum file for aggregation
        id: create_checksum_file
        run: |
          CHECKSUM_LINE_OUTPUT="${{ steps.checksum_win.outputs.checksum_line || steps.checksum_nix.outputs.checksum_line }}"
          TEMP_DIR="${{ runner.temp }}"
          FILE_PATH="$TEMP_DIR/checksum_line_${{ matrix.os }}.txt"

          echo "Runner OS: ${{ runner.os }}"
          echo "Target file path: $FILE_PATH"
          echo "Checksum line to write: $CHECKSUM_LINE_OUTPUT"
          mkdir -p "$TEMP_DIR"
          echo "$CHECKSUM_LINE_OUTPUT" > "$FILE_PATH"

          if [[ -f "$FILE_PATH" ]]; then
            echo "File $FILE_PATH created successfully."
            cat "$FILE_PATH"
          else
            echo "::error::File $FILE_PATH was not created!"
            exit 1
          fi
          echo "temp_file_path=$FILE_PATH" >> $GITHUB_OUTPUT
        shell: bash

      - name: Store checksum line for aggregation
        uses: actions/upload-artifact@v4
        with:
          name: checksum-line-${{ matrix.os }}
          path: ${{ steps.create_checksum_file.outputs.temp_file_path }}
          if-no-files-found: error

  aggregate-checksums:
    name: Aggregate Checksums
    needs: build-release
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Download all checksum lines
        uses: actions/download-artifact@v4
        with:
          pattern: checksum-line-*
          path: checksum-lines
          merge-multiple: true

      - name: Create aggregated checksums.txt file
        id: aggregate
        run: |
          echo "Listing downloaded artifact files in checksum-lines/:"
          ls -l checksum-lines/

          if find checksum-lines -name '*.txt' -print -quit | grep -q .; then
            echo "Contents of downloaded .txt files:"
            cat checksum-lines/*.txt
            cat checksum-lines/*.txt > checksums_raw.txt
          else
            echo "::warning::No .txt files found in downloaded artifacts."
            touch checksums_raw.txt
          fi

          echo "Contents of checksums_raw.txt (before sort):"
          cat checksums_raw.txt

          if [[ -s checksums_raw.txt ]]; then
            # Сортируем по имени файла (второе поле) для консистентности
            sort -k 3 checksums_raw.txt > checksums.txt
          else
            echo "checksums_raw.txt is empty, creating empty checksums.txt"
            touch checksums.txt
          fi

          echo "Checksums (SHA512) for release ${{ github.event.release.tag_name }}:" > aggregated_checksums.txt
          echo "" >> aggregated_checksums.txt
          cat checksums.txt >> aggregated_checksums.txt
          echo "checksum_path=aggregated_checksums.txt" >> $GITHUB_OUTPUT

          echo "Final contents of aggregated_checksums.txt:"
          cat aggregated_checksums.txt
        shell: bash

      - name: Upload aggregated checksums.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          AGG_FILE="${{ steps.aggregate.outputs.checksum_path }}"
          RELEASE_TAG="${{ github.event.release.tag_name }}"
          echo "Uploading '$AGG_FILE' to release '$RELEASE_TAG'"
          if [[ ! -f "$AGG_FILE" ]]; then
             echo "::error::Aggregated checksum file '$AGG_FILE' not found!"
             exit 1
          fi
          gh release upload "$RELEASE_TAG" "$AGG_FILE" --clobber
        shell: bash
